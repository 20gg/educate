<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd 
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/task   
http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 自动扫描组件， 去除controller，如果不去除会影响事务  -->
	<context:component-scan base-package="com.hysm">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 自动扫描，自动扫描以下文件目录应用事务 -->
	<context:component-scan base-package="com.hysm.mapper" />
	<context:component-scan base-package="com.hysm.service" />
	

	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder
		location="classpath:properties/jdbc.properties" />

	<!--创建jdbc数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling C3P0 -->
		<!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
		<property name="acquireIncrement"
			value="${c3p0.acquireIncrement}" />
		<!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
		<property name="acquireRetryAttempts"
			value="${c3p0.acquireRetryAttempts}" />
		<!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
		<property name="acquireRetryDelay"
			value="${c3p0.acquireRetryDelay}" />
		<!-- 隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查 -->
		<property name="idleConnectionTestPeriod"
			value="${c3p0.idleConnectionTestPeriod}" />
		<!-- 初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3 -->
		<property name="initialPoolSize"
			value="${c3p0.initialPoolSize}" />
		<!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<!-- 连接池中保留的最大连接数。默认为15 -->
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<!-- C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3 -->
		<property name="numHelperThreads"
			value="${c3p0.numHelperThreads}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
		<property name="maxStatements" value="${c3p0.maxStatements}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
		<property name="breakAfterAcquireFailure"
			value="${c3p0.breakAfterAcquireFailure}" />
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

	</bean>

	<!-- 以下使用spring自带模式操作数据 -->
	<!--  
		<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
		<ref local="dataSource" />
		</property>
		</bean>
	-->
	<!-- 上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size100MB -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	<!-- 事务管理-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- aop控制事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 读取数据方法，一般采用只读事务-->
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />

			<!--对数据库进行操作的方法，当产生Exception时进行回滚 -->
			<tx:method name="insert*" />
			<tx:method name="update*" />
			<tx:method name="modify*" />
			<tx:method name="remove*" />

		</tx:attributes>
	</tx:advice>
	<!--
		第一个*代表所有的返回值类型 
		第二个*代表所有的类
		第三个*代表类所有方法 
		最后一个..代表所有的参数。
	-->
	<aop:config>
		<aop:pointcut id="pc"
			expression="execution( * com.hysm.service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>

	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hysm.mapper" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>
	

	
	<!--  开启这个配置，spring才能识别@Scheduled注解   -->  
    <task:annotation-driven scheduler="qbScheduler"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/>
	
</beans>

